<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xsi:schemaLocation=" 
	http://www.springframework.org/schema/data/mongo   
		http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd  
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd  
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd  
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd"

	default-autowire="byName" default-lazy-init="false">




	<aop:aspectj-autoproxy />

	<context:component-scan base-package="com.jshop">
	</context:component-scan>

	<context:annotation-config />
	<context:property-placeholder location="classpath*:*.properties" />
	<!-- mongo配置 -->
	<mongo:mongo host="${mongo.host}" port="${mongo.port}" />
	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
		<constructor-arg ref="mongo" />
		<constructor-arg name="databaseName" value="${mongo.db}" />

	</bean>

	<!-- 数据库连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialPoolSize" value="${pool.initialPoolSize}" />
		<property name="minPoolSize" value="${pool.minPoolSize}" />
		<property name="maxPoolSize" value="${pool.maxPoolSize}" />
		<property name="maxIdleTime" value="${pool.maxIdleTime}" />
		<property name="acquireIncrement" value="${pool.acquireIncrement}" />
		<property name="checkoutTimeout" value="${pool.checkoutTimeout}" />
		<property name="maxIdleTimeExcessConnections" value="${pool.maxIdleTimeExcessConnections}" />
	</bean>
	<!-- 邮箱服务器配置 -->
	<bean id="javamailsenderimpl" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${email.host}"></property>
		<property name="defaultEncoding" value="${email.defaultEncoding}"></property>
		<property name="port" value="${email.port}"></property>
		<property name="username" value="${email.username}"></property>
		<property name="password" value="${email.password}"></property>
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">${email.auth}</prop>
				<prop key="mail.smtp.timeout">${email.timeout}</prop>
			</props>
		</property>

	</bean>

	<!-- activeMq -->
	<!-- 消息转换器 -->
	<bean id="messageConvertForSys" class="com.jshop.activemq.MessageConvertForSys"></bean>
	
	<!-- 消息发布者 -->
	<!-- TOPIC链接工厂 -->
	<bean id="topicSendConnectionFactory" class="org.apache.activemq.spring.ActiveMQConnectionFactory">
		<property name="brokerURL" value="tcp://127.0.0.1:61616" />
		<property name="useAsyncSend" value="true" />
	</bean>
	<!-- 发送消息的目的地（一个队列） -->
	<!-- 定义主题 -->
	<bean id="myTopic" class="org.apache.activemq.command.ActiveMQTopic">
		<constructor-arg value="jshoper3x.topic" />
	</bean>
	<!-- Spring JMS Template -->
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="topicSendConnectionFactory"></property>
		<property name="defaultDestination" ref="myTopic" />
		<property name="messageConverter" ref="messageConvertForSys" />
		<!-- 开启订阅模式 -->
		<property name="pubSubDomain" value="true" />
		<property name="receiveTimeout" value="1000" />
	</bean>
	
	
	<!-- 订阅者配置 -->
	<!-- 消息订阅者 -->
	<!-- TOPIC链接工厂 -->
	<bean id="topicListenConnectionFactory" class="org.apache.activemq.spring.ActiveMQConnectionFactory">
		<property name="brokerURL" value="tcp://127.0.0.1:61616" />
		<!-- 接收者ID -->  
        <property name="clientID" value="client_119" />  
	</bean>
	<bean id="myTopic2" class="org.apache.activemq.command.ActiveMQTopic">
		<constructor-arg value="jshoper4x.topic" />
	</bean>
	
	<!-- 消息发送方 -->
	<bean id="topicMessageSender" class="com.jshop.activemq.SimpleJMSSender">
		<property name="jmsTemplate" ref="jmsTemplate"></property>
	</bean>
	 <!-- 消息监听器 -->  
    <bean id="myTopicListener"  
        class="org.springframework.jms.listener.adapter.MessageListenerAdapter">  
        <constructor-arg ref="topicMessageReceiver" />  
        <!-- 接收消息的方法名称 -->  
        <property name="defaultListenerMethod" value="receive" />  
        <!-- 不进行消息转换 -->  
        <property name="messageConverter"><null/></property>  
    </bean> 
	
	<!-- 消息接收方 -->
	<bean id="topicMessageReceiver" class="com.jshop.activemq.SimpleJMSReceiver">
	</bean>
	<!-- 主题消息监听容器 -->
	<bean id="listenerContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="topicListenConnectionFactory" />
		<property name="pubSubDomain" value="true" /><!-- default is false -->
		<property name="destination" ref="myTopic" />  <!-- listen topic: myTopic -->
		<property name="subscriptionDurable" value="true" />
		<property name="messageListener" ref="myTopicListener" />
		<property name="receiveTimeout" value="10000"/>  
		 <!-- 接收者ID -->  
        <property name="clientId" value="client_119" />  
        <property name="durableSubscriptionName" value="client_119"/>  
		 
	</bean>


	<!-- 主题消息监听容器2 
	<bean id="listenerContainer2"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="topicListenConnectionFactory" />
		<property name="pubSubDomain" value="true" />
		<property name="destination" ref="myTopic2" />
		<property name="subscriptionDurable" value="true" />
		<property name="messageListener" ref="topicMessageReceiver" />
	</bean>-->


	<!-- jedis缓存配置 -->
	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.ip}" />
		<property name="port" value="${redis.port}" />
		<property name="poolConfig" ref="jedisPoolConfig" />
	</bean>
	<bean class="org.springframework.data.redis.core.RedisTemplate"
		p:connection-factory-ref="jedisConnectionFactory">
		<property name="keySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
	</bean>
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxActive" value="${redis.pool.maxActive}" />
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<property name="maxWait" value="${redis.pool.maxWait}" />
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />

	</bean>
	<!-- org.springframework.orm.hibernate3.LocalSessionFactoryBean -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.jshop.entity</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<value>
				hibernate.dialect=${hibernate.dialect}
				hibernate.show_sql=${hibernate.show_sql}
				hibernate.format_sql=${hibernate.format_sql}
				hibernate.cache.use_second_level_cache=${hibernate.cache.use_second_level_cache}
				hibernate.cache.provider_class=${hibernate.cache.provider_class}
				hibernate.cache.use_query_cache=${hibernate.cache.use_query_cache}
				hibernate.jdbc.batch_size=${hibernate.jdbc.batch_size}
				hibernate.jdbc.fetch_size=${hibernate.jdbc.fetch_size}
			</value>
		</property>

	</bean>
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />
	<aop:config>
		<aop:advisor pointcut="execution(* com.jshop.service.impl.*.*Service.*(..))"
			advice-ref="txAdvice" />
	</aop:config>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="SerialT*" propagation="REQUIRES_NEW" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="count*" read-only="true" />
			<tx:method name="check*" read-only="true" />
			<tx:method name="*" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>



	<!-- 配置异步线程执行器 -->  <!-- 为异步线程执行器 进注入 -->
	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 设置核心池子的大小 -->
		<property name="corePoolSize" value="10"></property>
		<!-- 设置最大池子的大小 -->
		<property name="maxPoolSize" value="30"></property>
	</bean>

	<!-- 配置activiti工作流引擎 <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration"> 
		<property name="dataSource" ref="dataSource" /> <property name="transactionManager" 
		ref="transactionManager"/> <property name="databaseSchemaUpdate" value="true" 
		/> <property name="mailServerHost" value="localhost" /> <property name="mailServerPort" 
		value="5025" /> <property name="jpaHandleTransaction" value="true" /> <property 
		name="jpaCloseEntityManager" value="true" /> <property name="jobExecutorActivate" 
		value="false" /> <property name="databaseType" value="mysql" /> </bean> <bean 
		id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean" destroy-method="destroy"> 
		<property name="processEngineConfiguration" ref="processEngineConfiguration" 
		/> </bean> <bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService" 
		/> <bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService" 
		/> <bean id="taskService" factory-bean="processEngine" factory-method="getTaskService" 
		/> <bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService" 
		/> <bean id="managementService" factory-bean="processEngine" factory-method="getManagementService" 
		/> <bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService" 
		/> -->

	<!-- <import resource="classpath:spring-config-cache.xml"/> <import resource="classpath:spring-config-shiro.xml"/> -->
</beans>
	